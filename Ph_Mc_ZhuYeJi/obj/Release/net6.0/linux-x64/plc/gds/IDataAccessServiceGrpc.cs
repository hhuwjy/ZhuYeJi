// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Plc/Gds/IDataAccessService.proto
// </auto-generated>
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Arp.Plc.Gds.Services.Grpc {
  public static partial class IDataAccessService
  {
    static readonly string __ServiceName = "Arp.Plc.Gds.Services.Grpc.IDataAccessService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadSingleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadSingleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteSingleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteSingleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse> __Method_ReadSingle = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadSingle",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadSingleRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadSingleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse> __Method_Read = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceReadResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse> __Method_WriteSingle = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WriteSingle",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteSingleRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteSingleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse> __Method_Write = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Write",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IDataAccessServiceWriteResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IDataAccessService</summary>
    [grpc::BindServiceMethod(typeof(IDataAccessService), "BindService")]
    public abstract partial class IDataAccessServiceBase
    {
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse> ReadSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse> Read(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse> WriteSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse> Write(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IDataAccessService</summary>
    public partial class IDataAccessServiceClient : grpc::ClientBase<IDataAccessServiceClient>
    {
      /// <summary>Creates a new client for IDataAccessService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IDataAccessServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IDataAccessService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IDataAccessServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IDataAccessServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IDataAccessServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse ReadSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadSingle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse ReadSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadSingle, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse> ReadSingleAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadSingleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse> ReadSingleAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadSingle, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse Read(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse Read(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse> ReadAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Reads the value of the variable directly from the
      ///&#x2F; given variable name.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Copies the value of the variable, given by the variable name,
      ///&#x2F; to the &lt;see cref="Arp.Device.Interface.Services.ReadItem" /> object, which will be returned.
      ///&#x2F; ReadSingle can only read one single variable, so if you want
      ///&#x2F; to read multiple variables simultaneously, an array or a
      ///&#x2F; range of an array, you have to use the
      ///&#x2F; &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Read" /> service instead.
      ///&#x2F; Be aware, this copy process isn't task consistent and the
      ///&#x2F; data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="portName">
      ///&#x2F; Full variable name uri.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.ReadItem" />.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse> ReadAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse WriteSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteSingle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse WriteSingle(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteSingle, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse> WriteSingleAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteSingleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse> WriteSingleAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteSingle, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse Write(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Write(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse Write(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Write, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse> WriteAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Writes the given value to the given variable name
      ///&#x2F; containing in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" />.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; Writes the given value to the given variable containing
      ///&#x2F; in the given &lt;see cref="Arp.Device.Interface.Services.WriteItem" /> object. WriteSingle
      ///&#x2F; can only write one single value, so if you want to write to
      ///&#x2F; multiple variables simultaneously, to an array or to a range
      ///&#x2F; of an array, you have to use the &lt;see cref="Arp.Device.Interface.Services.IDataAccessService.Write" />
      ///&#x2F; service instead. Be aware, this write process isn't task
      ///&#x2F; consistent and the data could be corrupted.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="data">
      ///&#x2F; Variable data which contains the variable name and the
      ///&#x2F; value to be written.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.Device.Interface.Services.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse> WriteAsync(global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Write, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override IDataAccessServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IDataAccessServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(IDataAccessServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReadSingle, serviceImpl.ReadSingle)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_WriteSingle, serviceImpl.WriteSingle)
          .AddMethod(__Method_Write, serviceImpl.Write).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IDataAccessServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReadSingle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadSingleResponse>(serviceImpl.ReadSingle));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceReadResponse>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_WriteSingle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteSingleResponse>(serviceImpl.WriteSingle));
      serviceBinder.AddMethod(__Method_Write, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteRequest, global::Arp.Plc.Gds.Services.Grpc.IDataAccessServiceWriteResponse>(serviceImpl.Write));
    }

  }
}
#endregion
