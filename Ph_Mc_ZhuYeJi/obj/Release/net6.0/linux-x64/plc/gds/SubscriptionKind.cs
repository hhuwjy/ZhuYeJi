// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Plc/Gds/SubscriptionKind.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Arp.Plc.Gds.Services.Grpc {

  /// <summary>Holder for reflection information generated from Plc/Gds/SubscriptionKind.proto</summary>
  public static partial class SubscriptionKindReflection {

    #region Descriptor
    /// <summary>File descriptor for Plc/Gds/SubscriptionKind.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SubscriptionKindReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5QbGMvR2RzL1N1YnNjcmlwdGlvbktpbmQucHJvdG8SGUFycC5QbGMuR2Rz",
            "LlNlcnZpY2VzLkdycGMqhAEKEFN1YnNjcmlwdGlvbktpbmQSCwoHU0tfTm9u",
            "ZRAAEhYKElNLX0hpZ2hQZXJmb3JtYW5jZRABEg8KC1NLX1JlYWxUaW1lEAIS",
            "EAoMU0tfUmVjb3JkaW5nEAMSFQoRU0tfQ2xvc2VkUmVhbFRpbWUQBBIRCg1T",
            "S19EaXJlY3RSZWFkEAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Arp.Plc.Gds.Services.Grpc.SubscriptionKind), }, null, null));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// &lt;summary>
  //// This enumeration contains the possible kinds of subscriptions.
  //// &lt;/summary>
  //// &lt;remarks>
  //// &lt;para>
  //// One of the main difference between these kinds are the internal used buffer and
  //// the way how they are triggered.
  //// &lt;/para>
  //// &lt;para>
  //// These enumerated kinds are equivalent to the kinds from &lt;c>Arp::Meta:Subscriptionkind&lt;/c>.
  //// &lt;/para>
  //// &lt;/remarks>
  /// </summary>
  public enum SubscriptionKind {
    /// <summary>
    //// &lt;summary>&lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_None")] SkNone = 0,
    /// <summary>
    //// &lt;summary>
    //// The subscription operates with a task-triggered &lt;c>DoubleBuffer&lt;/c>, which holds the last written port data.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_HighPerformance")] SkHighPerformance = 1,
    /// <summary>
    //// &lt;summary>
    //// The subscription operates with a task-triggered &lt;c>QuadBuffer&lt;/c>, which holds the last written port data.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_RealTime")] SkRealTime = 2,
    /// <summary>
    //// &lt;summary>
    //// The subscription operates with a task-triggered &lt;c>RingBuffer&lt;/c>, which holds the last &lt;c>N&lt;/c> numbers of written data.
    //// &lt;c>N&lt;/c> is a configurable parameter which define the capacity of the ring.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_Recording")] SkRecording = 3,
    /// <summary>
    //// &lt;summary>
    //// The subscription operates with a task-triggered &lt;c>RingBuffer&lt;/c>, which holds the last &lt;c>N&lt;/c> numbers of written data.
    //// &lt;c>N&lt;/c> is a configurable parameter which define the capacity of the ring.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_ClosedRealTime")] SkClosedRealTime = 4,
    /// <summary>
    //// &lt;summary>
    //// The subscription operates with a self-triggered &lt;c>DoubleBuffer&lt;/c>, which holds the last written port data.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("SK_DirectRead")] SkDirectRead = 5,
  }

  #endregion

}

#endregion Designer generated code
