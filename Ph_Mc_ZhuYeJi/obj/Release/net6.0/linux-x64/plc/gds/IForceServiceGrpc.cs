// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Plc/Gds/IForceService.proto
// </auto-generated>
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Arp.Plc.Gds.Services.Grpc {
  public static partial class IForceService
  {
    static readonly string __ServiceName = "Arp.Plc.Gds.Services.Grpc.IForceService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceAddVariableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceAddVariableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceRemoveVariableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceGetVariablesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsForcableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsForcableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse> __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsActiveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse> __Method_AddVariable = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddVariable",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceAddVariableRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceAddVariableResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RemoveVariable = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveVariable",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceRemoveVariableRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse> __Method_GetVariables = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVariables",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceGetVariablesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Reset = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reset",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse> __Method_IsForcable = new grpc::Method<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsForcable",
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsForcableRequest,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsForcableResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse> __Method_IsActive = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsActive",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_Arp_Plc_Gds_Services_Grpc_IForceServiceIsActiveResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Arp.Plc.Gds.Services.Grpc.IForceServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IForceService</summary>
    [grpc::BindServiceMethod(typeof(IForceService), "BindService")]
    public abstract partial class IForceServiceBase
    {
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Adds a new variable and value for forcing. Enables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The enabled force mode is signalized by notification and by the
      ///&#x2F; activated 'PlcState.Forcing'
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="item">
      ///&#x2F; Force item &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      ///&#x2F; of the variable with the full instance path and the force value.
      ///&#x2F; The data type of the force value must be equal with the data type
      ///&#x2F; of the target variable.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse> AddVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets forced variable. Disables force mode after force list is empty.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="variableName">
      ///&#x2F; Instance path of the variable.
      ///&#x2F; &lt;/param>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RemoveVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Gets a list of all forced variables.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns a list with all existing &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse> GetVariables(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets the force list. Disables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The disabled force mode is signalized by notification and by the
      ///&#x2F; deactivated PlcState.
      ///&#x2F; &lt;/remarks>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Reset(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether variable is forcable.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The variable has to meet the following requirements to be forcable:
      ///&#x2F; 1. The kind of variable should be an In- or an Out-port of a program
      ///&#x2F; (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      ///&#x2F; 2. The data type of the variable has to be supported.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the variable is forcable.&lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse> IsForcable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether force mode is active.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the force mode is active.&lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse> IsActive(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IForceService</summary>
    public partial class IForceServiceClient : grpc::ClientBase<IForceServiceClient>
    {
      /// <summary>Creates a new client for IForceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IForceServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IForceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IForceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IForceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IForceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Adds a new variable and value for forcing. Enables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The enabled force mode is signalized by notification and by the
      ///&#x2F; activated 'PlcState.Forcing'
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="item">
      ///&#x2F; Force item &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      ///&#x2F; of the variable with the full instance path and the force value.
      ///&#x2F; The data type of the force value must be equal with the data type
      ///&#x2F; of the target variable.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse AddVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVariable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Adds a new variable and value for forcing. Enables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The enabled force mode is signalized by notification and by the
      ///&#x2F; activated 'PlcState.Forcing'
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="item">
      ///&#x2F; Force item &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      ///&#x2F; of the variable with the full instance path and the force value.
      ///&#x2F; The data type of the force value must be equal with the data type
      ///&#x2F; of the target variable.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse AddVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddVariable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Adds a new variable and value for forcing. Enables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The enabled force mode is signalized by notification and by the
      ///&#x2F; activated 'PlcState.Forcing'
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="item">
      ///&#x2F; Force item &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      ///&#x2F; of the variable with the full instance path and the force value.
      ///&#x2F; The data type of the force value must be equal with the data type
      ///&#x2F; of the target variable.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse> AddVariableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVariableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Adds a new variable and value for forcing. Enables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The enabled force mode is signalized by notification and by the
      ///&#x2F; activated 'PlcState.Forcing'
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;param name="item">
      ///&#x2F; Force item &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" />, which contains the the name
      ///&#x2F; of the variable with the full instance path and the force value.
      ///&#x2F; The data type of the force value must be equal with the data type
      ///&#x2F; of the target variable.
      ///&#x2F; &lt;/param>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns &lt;see cref="Arp.System.Commons.Services.Io.DataAccessError.None" /> on success.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse> AddVariableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddVariable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets forced variable. Disables force mode after force list is empty.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="variableName">
      ///&#x2F; Instance path of the variable.
      ///&#x2F; &lt;/param>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVariable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets forced variable. Disables force mode after force list is empty.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="variableName">
      ///&#x2F; Instance path of the variable.
      ///&#x2F; &lt;/param>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveVariable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveVariable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets forced variable. Disables force mode after force list is empty.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="variableName">
      ///&#x2F; Instance path of the variable.
      ///&#x2F; &lt;/param>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveVariableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVariableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets forced variable. Disables force mode after force list is empty.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="variableName">
      ///&#x2F; Instance path of the variable.
      ///&#x2F; &lt;/param>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveVariableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveVariable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Gets a list of all forced variables.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns a list with all existing &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse GetVariables(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVariables(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Gets a list of all forced variables.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns a list with all existing &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse GetVariables(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVariables, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Gets a list of all forced variables.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns a list with all existing &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse> GetVariablesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVariablesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Gets a list of all forced variables.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; Returns a list with all existing &lt;see cref="Arp.System.Commons.Services.Io.ForceItem" /> objects.
      ///&#x2F; &lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse> GetVariablesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVariables, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets the force list. Disables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The disabled force mode is signalized by notification and by the
      ///&#x2F; deactivated PlcState.
      ///&#x2F; &lt;/remarks>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Reset(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Reset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets the force list. Disables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The disabled force mode is signalized by notification and by the
      ///&#x2F; deactivated PlcState.
      ///&#x2F; &lt;/remarks>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Reset(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets the force list. Disables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The disabled force mode is signalized by notification and by the
      ///&#x2F; deactivated PlcState.
      ///&#x2F; &lt;/remarks>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Resets the force list. Disables force mode.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The disabled force mode is signalized by notification and by the
      ///&#x2F; deactivated PlcState.
      ///&#x2F; &lt;/remarks>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResetAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether variable is forcable.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The variable has to meet the following requirements to be forcable:
      ///&#x2F; 1. The kind of variable should be an In- or an Out-port of a program
      ///&#x2F; (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      ///&#x2F; 2. The data type of the variable has to be supported.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the variable is forcable.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse IsForcable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsForcable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether variable is forcable.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The variable has to meet the following requirements to be forcable:
      ///&#x2F; 1. The kind of variable should be an In- or an Out-port of a program
      ///&#x2F; (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      ///&#x2F; 2. The data type of the variable has to be supported.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the variable is forcable.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse IsForcable(global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsForcable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether variable is forcable.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The variable has to meet the following requirements to be forcable:
      ///&#x2F; 1. The kind of variable should be an In- or an Out-port of a program
      ///&#x2F; (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      ///&#x2F; 2. The data type of the variable has to be supported.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the variable is forcable.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse> IsForcableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsForcableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether variable is forcable.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;remarks>
      ///&#x2F; The variable has to meet the following requirements to be forcable:
      ///&#x2F; 1. The kind of variable should be an In- or an Out-port of a program
      ///&#x2F; (IEC, C ++, Simulink ...) or a variable that is connected to I/O data.
      ///&#x2F; 2. The data type of the variable has to be supported.
      ///&#x2F; &lt;/remarks>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the variable is forcable.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse> IsForcableAsync(global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsForcable, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether force mode is active.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the force mode is active.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse IsActive(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsActive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether force mode is active.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the force mode is active.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse IsActive(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsActive, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether force mode is active.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the force mode is active.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse> IsActiveAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsActiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Tests whether force mode is active.
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;returns>
      ///&#x2F; &lt;b>true&lt;/b>if the force mode is active.&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse> IsActiveAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsActive, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override IForceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IForceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(IForceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddVariable, serviceImpl.AddVariable)
          .AddMethod(__Method_RemoveVariable, serviceImpl.RemoveVariable)
          .AddMethod(__Method_GetVariables, serviceImpl.GetVariables)
          .AddMethod(__Method_Reset, serviceImpl.Reset)
          .AddMethod(__Method_IsForcable, serviceImpl.IsForcable)
          .AddMethod(__Method_IsActive, serviceImpl.IsActive).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IForceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddVariable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceAddVariableResponse>(serviceImpl.AddVariable));
      serviceBinder.AddMethod(__Method_RemoveVariable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IForceServiceRemoveVariableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.RemoveVariable));
      serviceBinder.AddMethod(__Method_GetVariables, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceGetVariablesResponse>(serviceImpl.GetVariables));
      serviceBinder.AddMethod(__Method_Reset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Reset));
      serviceBinder.AddMethod(__Method_IsForcable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableRequest, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsForcableResponse>(serviceImpl.IsForcable));
      serviceBinder.AddMethod(__Method_IsActive, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Arp.Plc.Gds.Services.Grpc.IForceServiceIsActiveResponse>(serviceImpl.IsActive));
    }

  }
}
#endregion
