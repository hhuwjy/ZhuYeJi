// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Plc/Gds/DataAccessError.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Arp.Plc.Gds.Services.Grpc {

  /// <summary>Holder for reflection information generated from Plc/Gds/DataAccessError.proto</summary>
  public static partial class DataAccessErrorReflection {

    #region Descriptor
    /// <summary>File descriptor for Plc/Gds/DataAccessError.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataAccessErrorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1QbGMvR2RzL0RhdGFBY2Nlc3NFcnJvci5wcm90bxIZQXJwLlBsYy5HZHMu",
            "U2VydmljZXMuR3JwYyraAgoPRGF0YUFjY2Vzc0Vycm9yEgwKCERBRV9Ob25l",
            "EAASEQoNREFFX05vdEV4aXN0cxABEhUKEURBRV9Ob3RBdXRob3JpemVkEAIS",
            "FAoQREFFX1R5cGVNaXNtYXRjaBADEhsKF0RBRV9Qb3J0TmFtZVN5bnRheEVy",
            "cm9yEAQSHQoZREFFX1BvcnROYW1lU2VtYW50aWNFcnJvchAFEhcKE0RBRV9J",
            "bmRleE91dE9mUmFuZ2UQBhIWChJEQUVfTm90SW1wbGVtZW50ZWQQBxIUChBE",
            "QUVfTm90U3VwcG9ydGVkEAgSHAoYREFFX0N1cnJlbnRseVVuYXZhaWxhYmxl",
            "EAkSGwoXREFFX1VudmFsaWRTdWJzY3JpcHRpb24QChIOCgpEQUVfTm9EYXRh",
            "EAsSFQoRREFFX0ludmFsaWRDb25maWcQDBIUCg9EQUVfVW5zcGVjaWZpZWQQ",
            "/wFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Arp.Plc.Gds.Services.Grpc.DataAccessError), }, null, null));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// &lt;summary>
  //// This enumeration contains the possible data access errors.
  //// &lt;/summary>
  /// </summary>
  public enum DataAccessError {
    /// <summary>
    //// &lt;summary>
    //// No error.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_None")] DaeNone = 0,
    /// <summary>
    //// &lt;summary>
    //// The variable does not exist.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_NotExists")] DaeNotExists = 1,
    /// <summary>
    //// &lt;summary>
    //// The user is not authorized.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_NotAuthorized")] DaeNotAuthorized = 2,
    /// <summary>
    //// &lt;summary>
    //// During a write operation the type of the value is not suitable for the particular variable.
    //// &lt;/summary>
    //// &lt;remarks>
    //// The &lt;see cref="Arp.System.Commons.Services.Io.IDataAccessService" /> does not convert types. The type of each value
    //// which is to be written needs to be suitable for the particular variable.
    //// &lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DAE_TypeMismatch")] DaeTypeMismatch = 3,
    /// <summary>
    //// &lt;summary>
    //// The name of the variable as given during a write or read operation is syntactically not correct.
    //// &lt;/summary>
    //// &lt;remarks>
    //// For example the variable name contains an index range.
    //// &lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DAE_PortNameSyntaxError")] DaePortNameSyntaxError = 4,
    /// <summary>
    //// &lt;summary>
    //// The semantic of the name of the variable as given during a write or read operation is semantically not correct.
    //// &lt;/summary>
    //// &lt;remarks>
    //// For example the variable name contains an index range with a start index not lower than the end index.
    //// &lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DAE_PortNameSemanticError")] DaePortNameSemanticError = 5,
    /// <summary>
    //// &lt;summary>
    //// The variable name contains an index which is out of range.
    //// &lt;/summary>
    //// &lt;remarks>
    //// For example a the variable is addressed as if it was a
    //// &lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DAE_IndexOutOfRange")] DaeIndexOutOfRange = 6,
    /// <summary>
    //// &lt;summary>
    //// The variable type is not Implemented yet.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_NotImplemented")] DaeNotImplemented = 7,
    /// <summary>
    //// &lt;summary>
    //// The variable type is not supported.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_NotSupported")] DaeNotSupported = 8,
    /// <summary>
    //// &lt;summary>
    //// The requested service is currently not available.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_CurrentlyUnavailable")] DaeCurrentlyUnavailable = 9,
    /// <summary>
    //// &lt;summary>
    //// Invalid subscription.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_UnvalidSubscription")] DaeUnvalidSubscription = 10,
    /// <summary>
    //// &lt;summary>
    //// NoData available.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_NoData")] DaeNoData = 11,
    /// <summary>
    //// &lt;summary>
    //// The configuration for the subscription contains an error
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_InvalidConfig")] DaeInvalidConfig = 12,
    /// <summary>
    //// &lt;summary>
    //// Unspecified error. See log file for more information.
    //// &lt;/summary>
    /// </summary>
    [pbr::OriginalName("DAE_Unspecified")] DaeUnspecified = 255,
  }

  #endregion

}

#endregion Designer generated code
