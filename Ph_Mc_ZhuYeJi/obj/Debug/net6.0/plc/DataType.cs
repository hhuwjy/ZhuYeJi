// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Plc/DataType.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Arp.Plc.Grpc {

  /// <summary>Holder for reflection information generated from Plc/DataType.proto</summary>
  public static partial class DataTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for Plc/DataType.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQbGMvRGF0YVR5cGUucHJvdG8SDEFycC5QbGMuR3JwYyr7BQoIRGF0YVR5",
            "cGUSCwoHRFRfTm9uZRAAEgsKB0RUX1ZvaWQQARIKCgZEVF9CaXQQAhIOCgpE",
            "VF9Cb29sZWFuEAMSDAoIRFRfVUludDgQBBILCgdEVF9JbnQ4EAUSDAoIRFRf",
            "Q2hhcjgQBhINCglEVF9DaGFyMTYQBxINCglEVF9VSW50MTYQCBIMCghEVF9J",
            "bnQxNhAJEg0KCURUX1VJbnQzMhAKEgwKCERUX0ludDMyEAsSDQoJRFRfVUlu",
            "dDY0EAwSDAoIRFRfSW50NjQQDRIOCgpEVF9GbG9hdDMyEA4SDgoKRFRfRmxv",
            "YXQ2NBAPEhAKDERUX1ByaW1pdGl2ZRAgEg8KC0RUX0RhdGVUaW1lECESDgoK",
            "RFRfSWVjVGltZRAiEhAKDERUX0llY1RpbWU2NBAjEg4KCkRUX0llY0RhdGUQ",
            "JBIQCgxEVF9JZWNEYXRlNjQQJRISCg5EVF9JZWNEYXRlVGltZRAmEhQKEERU",
            "X0llY0RhdGVUaW1lNjQQJxITCg9EVF9JZWNUaW1lT2ZEYXkQKBIVChFEVF9J",
            "ZWNUaW1lT2ZEYXk2NBApEhMKD0RUX1N0YXRpY1N0cmluZxAqEhAKDERUX0ll",
            "Y1N0cmluZxArEhAKDERUX0NsclN0cmluZxAsEg0KCURUX1N0cmluZxAtEhEK",
            "DURUX0VsZW1lbnRhcnkQQBITCg9EVF9BcnJheUVsZW1lbnQQQRINCglEVF9T",
            "dHJ1Y3QQQhIMCghEVF9DbGFzcxBDEhQKEERUX0Z1bmN0aW9uQmxvY2sQRBIQ",
            "CgxEVF9TdWJzeXN0ZW0QRRIOCgpEVF9Qcm9ncmFtEEYSEAoMRFRfQ29tcG9u",
            "ZW50EEcSDgoKRFRfTGlicmFyeRBIEg8KCkRUX0NvbXBsZXgQ/gESDwoKRFRf",
            "UG9pbnRlchCABBINCghEVF9BcnJheRCACBIMCgdEVF9FbnVtEIAQEhEKDERU",
            "X1JlZmVyZW5jZRCAIBIUCg9EVF9CYXNlVHlwZU1hc2sQ/wFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Arp.Plc.Grpc.DataType), }, null, null));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// &lt;summary>
  //// These enumerated types are equivalent to the types from ARP::DataType.
  //// &lt;/summary>
  //// &lt;remarks>
  //// Each port with one of these types is subscribable, independently of the
  //// kind(input/intern/output) of the particular port.
  //// &lt;/remarks>
  /// </summary>
  public enum DataType {
    /// <summary>
    //// &lt;summary>Unspecified.&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_None")] DtNone = 0,
    /// <summary>
    //// &lt;summary>Void - Arp C++ empty type&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Void")] DtVoid = 1,
    /// <summary>
    //// &lt;summary>Bit - Arp C++ data type (1 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Bit")] DtBit = 2,
    /// <summary>
    //// &lt;summary>Boolean - Arp C++ data type (1 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Boolean")] DtBoolean = 3,
    /// <summary>
    //// &lt;summary>UInt8 - Arp C++ data type (1 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_UInt8")] DtUint8 = 4,
    /// <summary>
    //// &lt;summary>Int8 - Arp C++ data type (1 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Int8")] DtInt8 = 5,
    /// <summary>
    //// &lt;summary>Char8 - Arp C++ data type (1 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Char8")] DtChar8 = 6,
    /// <summary>
    //// &lt;summary>Char16 - Arp C++ data type (2 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Char16")] DtChar16 = 7,
    /// <summary>
    //// &lt;summary>UInt16 - Arp C++ data type (2 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_UInt16")] DtUint16 = 8,
    /// <summary>
    //// &lt;summary>Int16 - Arp C++ data type (2 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Int16")] DtInt16 = 9,
    /// <summary>
    //// &lt;summary>UInt32 - Arp C++ data type (4 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_UInt32")] DtUint32 = 10,
    /// <summary>
    //// &lt;summary>Int32 - Arp C++ data type (4 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Int32")] DtInt32 = 11,
    /// <summary>
    //// &lt;summary>UInt64 - Arp C++ data type (8 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_UInt64")] DtUint64 = 12,
    /// <summary>
    //// &lt;summary>Int64 - Arp C++ data type (8 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Int64")] DtInt64 = 13,
    /// <summary>
    //// &lt;summary>Float32 - Arp C++ data type (4 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Float32")] DtFloat32 = 14,
    /// <summary>
    //// &lt;summary>Float64 - Arp C++ data type (8 Byte)&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Float64")] DtFloat64 = 15,
    /// <summary>
    //// &lt;summary>Limit of primitive types.&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Primitive")] DtPrimitive = 32,
    /// <summary>
    //// &lt;summary>C++ DateTime type&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_DateTime")] DtDateTime = 33,
    /// <summary>
    //// &lt;summary>IEC type: TIME [int32]&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecTime")] DtIecTime = 34,
    /// <summary>
    //// &lt;summary>IEC type: LTIME [int64]&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecTime64")] DtIecTime64 = 35,
    /// <summary>
    //// &lt;summary>IEC type: DATE [N/A]&lt;/summary>
    //// &lt;remarks>Not supported by PCWE.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_IecDate")] DtIecDate = 36,
    /// <summary>
    //// &lt;summary>IEC type: LDATE [int64]&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecDate64")] DtIecDate64 = 37,
    /// <summary>
    //// &lt;summary>IEC type: DATE_AND_TIME, DT [N/A]&lt;/summary>
    //// &lt;remarks>Not supported by PCWE.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_IecDateTime")] DtIecDateTime = 38,
    /// <summary>
    //// &lt;summary>IEC type: LDATE_AND_TIME, LDT [int64]&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecDateTime64")] DtIecDateTime64 = 39,
    /// <summary>
    //// &lt;summary>IEC type: TIME_OF_DAY, TOD [N/A]&lt;/summary>
    //// &lt;remarks>Not supported by PCWE.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_IecTimeOfDay")] DtIecTimeOfDay = 40,
    /// <summary>
    //// &lt;summary>IEC type: LTIME_OF_DAY, LTOD [int64]&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecTimeOfDay64")] DtIecTimeOfDay64 = 41,
    /// <summary>
    //// &lt;summary>Static String type&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_StaticString")] DtStaticString = 42,
    /// <summary>
    //// &lt;summary>Iec String type, only for internal use&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_IecString")] DtIecString = 43,
    /// <summary>
    //// &lt;summary>.NET/C# String type, only for internal use&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_ClrString")] DtClrString = 44,
    /// <summary>
    //// &lt;summary>C++ String type, only for internal use&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_String")] DtString = 45,
    /// <summary>
    //// &lt;summary>Limit of elementary types.&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Elementary")] DtElementary = 64,
    /// <summary>
    //// &lt;summary>ArrayOfArray&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_ArrayElement")] DtArrayElement = 65,
    /// <summary>
    //// &lt;summary>Struct&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Struct")] DtStruct = 66,
    /// <summary>
    //// &lt;summary>Class&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Class")] DtClass = 67,
    /// <summary>
    //// &lt;summary>Function Block&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_FunctionBlock")] DtFunctionBlock = 68,
    /// <summary>
    //// &lt;summary>Subsystem&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Subsystem")] DtSubsystem = 69,
    /// <summary>
    //// &lt;summary>Program&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Program")] DtProgram = 70,
    /// <summary>
    //// &lt;summary>Component&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Component")] DtComponent = 71,
    /// <summary>
    //// &lt;summary>Library&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Library")] DtLibrary = 72,
    /// <summary>
    //// &lt;summary>Limit of complex types.&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Complex")] DtComplex = 254,
    /// <summary>
    //// &lt;summary>Pointer flag.&lt;/summary>
    //// &lt;remarks>Pointer are declared as &lt;see cref="Arp.Plc.DataType.Elementary" /> kind.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_Pointer")] DtPointer = 512,
    /// <summary>
    //// &lt;summary>ArrayOfArray&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_Array")] DtArray = 1024,
    /// <summary>
    //// &lt;summary>Enumaration flag&lt;/summary>
    //// &lt;remarks>Enums are declared as &lt;see cref="Arp.Plc.DataType.Elementary" /> kind.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_Enum")] DtEnum = 2048,
    /// <summary>
    //// &lt;summary>Reference flag&lt;/summary>
    //// &lt;remarks>Determines a C# reference type.&lt;/remarks>
    /// </summary>
    [pbr::OriginalName("DT_Reference")] DtReference = 4096,
    /// <summary>
    //// &lt;summary>For removing all flags&lt;/summary>
    /// </summary>
    [pbr::OriginalName("DT_BaseTypeMask")] DtBaseTypeMask = 255,
  }

  #endregion

}

#endregion Designer generated code
