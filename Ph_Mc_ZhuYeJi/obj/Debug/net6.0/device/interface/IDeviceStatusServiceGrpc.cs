// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Device/Interface/IDeviceStatusService.proto
// </auto-generated>
// Original file comments:
// /////////////////////////////////////////////////////////////////////////////
//
//  Copyright PHOENIX CONTACT Electronics GmbH
//
// /////////////////////////////////////////////////////////////////////////////
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Arp.Device.Interface.Services.Grpc {
  public static partial class IDeviceStatusService
  {
    static readonly string __ServiceName = "Arp.Device.Interface.Services.Grpc.IDeviceStatusService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest> __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse> __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest> __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse> __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse> __Method_GetItem = new grpc::Method<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItem",
        __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemRequest,
        __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse> __Method_GetItems = new grpc::Method<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetItems",
        __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemsRequest,
        __Marshaller_Arp_Device_Interface_Services_Grpc_IDeviceStatusServiceGetItemsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IDeviceStatusService</summary>
    [grpc::BindServiceMethod(typeof(IDeviceStatusService), "BindService")]
    public abstract partial class IDeviceStatusServiceBase
    {
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a single state
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifier">String for select the item&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse> GetItem(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a list of states
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifiers">Arry of String for select the items&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse> GetItems(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IDeviceStatusService</summary>
    public partial class IDeviceStatusServiceClient : grpc::ClientBase<IDeviceStatusServiceClient>
    {
      /// <summary>Creates a new client for IDeviceStatusService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IDeviceStatusServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IDeviceStatusService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IDeviceStatusServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IDeviceStatusServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IDeviceStatusServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a single state
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifier">String for select the item&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse GetItem(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a single state
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifier">String for select the item&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse GetItem(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItem, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a single state
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifier">String for select the item&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse> GetItemAsync(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a single state
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifier">String for select the item&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse> GetItemAsync(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItem, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a list of states
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifiers">Arry of String for select the items&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse GetItems(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a list of states
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifiers">Arry of String for select the items&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse GetItems(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetItems, null, options, request);
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a list of states
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifiers">Arry of String for select the items&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse> GetItemsAsync(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; &lt;summary>
      ///&#x2F; Read a list of states
      ///&#x2F; &lt;/summary>
      ///&#x2F; &lt;param name="identifiers">Arry of String for select the items&lt;/param>
      ///&#x2F; &lt;returns>value as &lt;code>RscVariant&lt;/code> on success, &lt;code>RscType::Void&lt;/code> on error&lt;/returns>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse> GetItemsAsync(global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetItems, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override IDeviceStatusServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IDeviceStatusServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(IDeviceStatusServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetItem, serviceImpl.GetItem)
          .AddMethod(__Method_GetItems, serviceImpl.GetItems).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IDeviceStatusServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemResponse>(serviceImpl.GetItem));
      serviceBinder.AddMethod(__Method_GetItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsRequest, global::Arp.Device.Interface.Services.Grpc.IDeviceStatusServiceGetItemsResponse>(serviceImpl.GetItems));
    }

  }
}
#endregion
